---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2021/1/2 17:07
---

cannonList = {}

local outputFileName = "舰炮FromScripts.csv"

EquipTypeEnum = {  -- compare_group in D_EDBT
    ["Cannon"] = 1,
    ["Torpedo"] = 2,
    ["Antiair"] = 3,
    ["plane"] = 4,
    ["facility"] = 5,
    ["Torpedo_SM"] = 6,
}

EquipTypeName= {  -- compare_group in D_EDBT
    [1] = "Cannon",
    [2] = "Torpedo",
    [3] = "Antiair",
    [4] = "plane",
    [5] = "facility",
    [6] = "Torpedo_SM",
}


EquipRarityEnum = {  -- rarity in D_EDS
    ["Gray"] = 2,
    ["Blue"] = 3,
    ["Purple"] = 4,
    ["Gold"] = 5,
    ["SSR"] = 6,
}

EquipRarityName = {  -- rarity in D_EDS
    [1] = "Gray",
    [2] = "Gray",
    [3] = "Blue",
    [4] = "Purple",
    [5] = "Gold",
    [6] = "SSR",
}

AmmoTypeName = {
    [1] = "穿甲弹",
    [2] = "高爆弹",
    [3] = "通常弹",
    [7] = "半穿甲弹",
}

EquipTypeName = {  -- type in D_EDS, equip_type in D_EDBT
    [1] = "舰炮(驱逐)",
    [2] = "舰炮(轻巡)",
    [3] = "舰炮(重巡)",
    [4] = "舰炮(战列)",
    [5] = "鱼雷",
    [6] = "防空炮",
    [7] = "战斗机",
    [8] = "鱼雷机",
    [9] = "轰炸机",
    [10] = "设备",
    [11] = "舰炮(大口径重巡)",
    [12] = "水上机",
    [13] = "鱼雷(潜艇)",
    [14] = "设备",
    [15] = "反潜机",
    [17] = "直升机",
    [18] = "货物",
}


local D_EDT = pg.equip_data_template
local D_EDS = pg.equip_data_statistics
local D_WP = pg.weapon_property
local D_BA_T = pg.barrage_template
local D_BU_T = pg.bullet_template
local D_EDBT = pg.equip_data_by_type


local function getEquipMaxLv(key)
    local tmp = key
    while(D_EDT[tmp].next ~= 0) do
        tmp = tmp + 1
    end
    return tmp - key
end

local function getWeaponProp(equipNo, lv, propName)
    --print("#DEBUG#: " .. equipNo .. " " .. lv .. " " .. propName)
    return D_WP[equipNo + lv][propName]
end

local function getBarrageProp(barrageNo, propName)
    return D_BA_T[barrageNo][propName]
end

local function getBulletProp(bulletNo, propName)
    return D_BU_T[bulletNo][propName]
end

function CalculateReloadTime(reload_max, reload)
    if reload == nil then
        reload = BattleConfig.K2
    end
    return reload_max / BattleConfig.K1 / math.sqrt((reload + BattleConfig.K2) * BattleConfig.K3)
end

local function calculateBulletNum(cannon)
    return (cannon.primal_repeat + 1) * (cannon.senior_repeat + 1)
end

local function calculateSpread(c)
    if c.spread < 0 then
        return -2 * c.spread
    else
        return c.spread
    end
end

local function genCannonList()
    for key, value in pairs(D_EDT) do
        if value and type(key) == "number" and not value.base then
            compare_group = D_EDBT[value.type].compare_group
            if compare_group == EquipTypeEnum["Cannon"] then
                --cannonList[key] = {}
                table.insert(cannonList, key, {})
            end
        end
    end
end

local function collectCannonData()
    for k, v in pairs(cannonList) do
        v["name"] = D_EDS[k].name
        v["tech"] = D_EDS[k].tech
        v["rarity"] = D_EDS[k].rarity
        v["type"] = D_EDS[k].type
        v["max_lv"] = getEquipMaxLv(k)
        v["damage"] = D_WP[k].damage
        v["up_damage"] = getWeaponProp(k, v.max_lv, "damage")
        v["primal_repeat"] = getBarrageProp(D_WP[k].barrage_ID[1], "primal_repeat")
        v["senior_repeat"] = getBarrageProp(D_WP[k].barrage_ID[1], "senior_repeat")
        v["senior_delay"] = getBarrageProp(D_WP[k].barrage_ID[1], "senior_delay")
        v["reload_max"] = D_WP[k].reload_max
        v["up_reload_max"] = getWeaponProp(k, v.max_lv, "reload_max")
        v["range"] = getBulletProp(D_WP[k].bullet_ID[1], "range")
        v["spread"] = getBarrageProp(D_WP[k].barrage_ID[1], "angle")
        v["value_2"] = D_EDS[k].value_2  --cannon
        v["attribute_2"] = D_EDS[k].attribute_2
        v["value_3"] = D_EDS[k].value_3  --antiAircraft
        v["attribute_3"] = D_EDS[k].attribute_3
        v["aim_type"] = D_WP[k].aim_type
        v["angle"] = D_WP[k].angle
        v["ammo_type"] = getBulletProp(D_WP[k].bullet_ID[1], "ammo_type")
        v["damage_type"] = getBulletProp(D_WP[k].bullet_ID[1], "damage_type") --护甲补正，三元table
        v["corrected"] = D_WP[k].corrected
        v["nationality"] = D_EDS[k].nationality
        v["speciality"] = D_EDS[k].speciality
    end
end

local cannonHeaderString = "icon,name,rarity,type,max_lv,damage,up_damage,bullet_num,reload_time,up_reload_time,range,spread,cannon,antiair,speciality,angle,ammo_type,corrected,senior_delay,vs轻,vs中,vs重"
local function cannonToString(c)
    name = c.name .. "T" .. c.tech
    res = name
    res = res .. "," .. name
    res = res .. "," .. EquipRarityName[c.rarity]
    res = res .. "," .. EquipType.Type2Name2(c.type)
    res = res .. "," .. c.max_lv
    res = res .. "," .. c.damage
    res = res .. "," .. c.up_damage
    res = res .. "," .. calculateBulletNum(c)
    res = res .. "," .. string.format("%0.2f", CalculateReloadTime(c.reload_max))
    res = res .. "," .. string.format("%0.2f", CalculateReloadTime(c.up_reload_max))
    res = res .. "," .. c.range
    res = res .. "," .. calculateSpread(c)
    res = res .. "," .. c.value_2
    res = res .. "," .. c.value_3
    res = res .. "," .. c.speciality
    res = res .. "," .. c.angle
    res = res .. "," .. AmmoTypeName[c.ammo_type]
    res = res .. "," .. c.corrected
    res = res .. "," .. (c.senior_delay * c.senior_repeat)
    res = res .. "," .. c.damage_type[1]
    res = res .. "," .. c.damage_type[2]
    res = res .. "," .. c.damage_type[3]

    return res
end

local function writeCannonsToFile()
    local file = io.open (outputFileName, "w")

    file:write(cannonHeaderString.."\n")

    for k, v in pairs(cannonList) do
        local str = cannonToString(v)
        file:write(str .."\n")
    end

    file:close()
end

function eeTest()

    genCannonList()
    collectCannonData()
    writeCannonsToFile()
end
